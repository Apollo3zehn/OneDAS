@inherits StateComponentBase

<EditForm class="h-100 flex-column" Model="@this.FilterDescription" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div>
        <MatSelectItem class="settings-control"
                       Label="Code Type"
                       Disabled="true"
                       @bind-Value="this.FilterDescription.CodeType"
                       Items="this.AppState.CodeTypeValues">
            <ItemTemplate Context="value">
                @Utilities.GetEnumLocalization(@value)
            </ItemTemplate>
        </MatSelectItem>

        <MatSelectItem class="settings-control"
                       Label="Code Language"
                       @bind-Value="this.FilterDescription.CodeLanguage"
                       Items="this.AppState.CodeLanguageValues">
            <ItemTemplate Context="value">
                @Utilities.GetEnumLocalization(@value)
            </ItemTemplate>
        </MatSelectItem>

        <MatCheckbox Class="settings-control"
                     Label="Publish"
                     @bind-Value="this.FilterDescription.IsPublic">
        </MatCheckbox>

        <MatTextField class="settings-control"
                      Label="Name"
                      @bind-Value="this.FilterDescription.Name">
        </MatTextField>

        <div class="validation-message-for-settings-control">
            <ValidationMessage For="@(() => this.FilterDescription.Name)" />
        </div>

        @if (this.FilterDescription.CodeType == CodeType.Channel)
        {
            <MatTextField class="settings-control"
                          Label="Group"
                          ReadOnly="true"
                          @bind-Value="this.FilterDescription.Group">
            </MatTextField>

            <MatTextField class="settings-control"
                          Label="Unit"
                          @bind-Value="this.FilterDescription.Unit">
            </MatTextField>
        }

        @if (this.FilterDescription.CodeType == CodeType.Channel || this.FilterDescription.CodeType == CodeType.Project)
        {
            <MatSelectItem class="settings-control"
                           Label="Sample Rate"
                           @bind-Value="this.FilterDescription.SampleRate"
                           Items="this.UserState.SampleRateValues">
            </MatSelectItem>
        }

        <div class="configuration-panel mt-auto">
            <div class="flex-row">
                <div class="configuration-panel-hover">
                    <div class="icon-button" @onclick="this.OpenFilterProjectRequestDialog">
                        @this.FilterDescription.RequestedProjectIds.Count
                        @if (this.FilterDescription.RequestedProjectIds.Count == 1)
                        {
                            <MatSubtitle2 class="clear-margin">Project</MatSubtitle2>
                        }
                        else
                        {
                            <MatSubtitle2 class="clear-margin">Projects</MatSubtitle2>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <MatButton Class="w-100"
               Icon="@MatIconNames.Save"
               Outlined="true"
               Type="submit"
               Label="Save">
    </MatButton>

</EditForm>

<!-- Should be outside the form, otherwise there will come the following error:
 MatBlazor.MatCheckbox`1[System.Boolean] requires a value for the 'ValueExpression' parameter. Normally this is provided automatically when using 'bind-Value'. -->
<FilterProjectRequestModal OnProjectIdsSelected="this.SelectProjectIds"
                           @bind-IsOpen="this.FilterProjectRequestDialogIsOpen"
                           SelectedProjectIds="this.FilterDescription.RequestedProjectIds" />